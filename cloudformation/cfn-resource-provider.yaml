AWSTemplateFormatVersion: '2010-09-09'
Description: Custom CloudFormation Provider
Parameters:
  S3BucketPrefix:
    Type: String
    Default: ''
  CFNCustomProviderZipFileName:
    Type: String
    Default: lambdas/cfn-s3-public-access-block-latest.zip
Resources:
  LambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - LambdaRole
    Properties:
      PolicyName: CFNCustomProviderPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
            Resource:
              - '*'
          - Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
            Effect: Allow
      Roles:
        - !Ref 'LambdaRole'
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: kmsReadInline
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetAccountPublicAccessBlock
                  - s3:PutAccountPublicAccessBlock
                Resource: '*'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  CFNCustomProvider:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaRole
    Properties:
      Description: S3 Public Access Block Custom Resource Provider
      Code:
        S3Bucket: !Sub '${S3BucketPrefix}-${AWS::Region}'
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      FunctionName: cfn-s3-public-access-block-provider
      Handler: index.handler
      Timeout: 120
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: nodejs12.x
